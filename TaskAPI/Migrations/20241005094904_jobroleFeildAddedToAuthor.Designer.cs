// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAPI.Models;

#nullable disable

namespace TaskAPI.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20241005094904_jobroleFeildAddedToAuthor")]
    partial class jobroleFeildAddedToAuthor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNo = "12",
                            City = "Colombo",
                            FullName = "Manusha Gunathilaka",
                            JobRole = "Developer",
                            Street = "Main St"
                        },
                        new
                        {
                            Id = 2,
                            AddressNo = "34",
                            City = "Kandy",
                            FullName = "Methsara Dissanayaka",
                            JobRole = "Systems Engineer",
                            Street = "Green Ave"
                        },
                        new
                        {
                            Id = 3,
                            AddressNo = "56",
                            City = "Galle",
                            FullName = "Kalpa Wishwajith",
                            JobRole = "Developer",
                            Street = "Highland Rd"
                        },
                        new
                        {
                            Id = 4,
                            AddressNo = "78",
                            City = "Negombo",
                            FullName = "Kusal Mendis",
                            JobRole = "QA",
                            Street = "Lake View"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2024, 10, 5, 15, 18, 56, 865, DateTimeKind.Local).AddTicks(511),
                            Description = "Finish the report for the upcoming project deadline.",
                            Due = new DateTime(2024, 10, 10, 15, 18, 56, 865, DateTimeKind.Local).AddTicks(527),
                            Status = 0,
                            Title = "Complete Project Report"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Created = new DateTime(2024, 10, 5, 15, 18, 56, 865, DateTimeKind.Local).AddTicks(536),
                            Description = "Prepare slides and notes for Monday's presentation.",
                            Due = new DateTime(2024, 10, 7, 15, 18, 56, 865, DateTimeKind.Local).AddTicks(536),
                            Status = 1,
                            Title = "Prepare for Presentation"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Created = new DateTime(2024, 10, 5, 15, 18, 56, 865, DateTimeKind.Local).AddTicks(538),
                            Description = "Schedule a meeting with the team to discuss project progress.",
                            Due = new DateTime(2024, 10, 8, 15, 18, 56, 865, DateTimeKind.Local).AddTicks(538),
                            Status = 0,
                            Title = "Team Meeting"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Author", "Author")
                        .WithMany("Todos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
