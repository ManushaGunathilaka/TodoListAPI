// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAPI.Models;

#nullable disable

namespace TaskAPI.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20241004120406_Author_Entity_And_Data")]
    partial class Author_Entity_And_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Manusha Gunathilaka"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Methsara Dissanayaka"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Kalpa Wishwajith"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Kusal Mendis"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2024, 10, 4, 17, 34, 2, 282, DateTimeKind.Local).AddTicks(1044),
                            Description = "Finish the report for the upcoming project deadline.",
                            Due = new DateTime(2024, 10, 9, 17, 34, 2, 282, DateTimeKind.Local).AddTicks(1055),
                            Status = 0,
                            Title = "Complete Project Report"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Created = new DateTime(2024, 10, 4, 17, 34, 2, 282, DateTimeKind.Local).AddTicks(1066),
                            Description = "Prepare slides and notes for Monday's presentation.",
                            Due = new DateTime(2024, 10, 6, 17, 34, 2, 282, DateTimeKind.Local).AddTicks(1067),
                            Status = 1,
                            Title = "Prepare for Presentation"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Created = new DateTime(2024, 10, 4, 17, 34, 2, 282, DateTimeKind.Local).AddTicks(1069),
                            Description = "Schedule a meeting with the team to discuss project progress.",
                            Due = new DateTime(2024, 10, 7, 17, 34, 2, 282, DateTimeKind.Local).AddTicks(1069),
                            Status = 0,
                            Title = "Team Meeting"
                        });
                });

            modelBuilder.Entity("TaskAPI.Models.Todo", b =>
                {
                    b.HasOne("TaskAPI.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
